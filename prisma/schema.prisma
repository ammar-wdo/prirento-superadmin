// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id   String @id @default(uuid())
  name String

  slug String @unique

  email       String @unique
  password    String
  address     String
  phoneNumber String
  whatsApp    String

  logo    String
  gallary String[]

  content String

  promoted Boolean

  openingTime Json?
  away        Boolean @default(false)

  terms String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  cars Car[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id   String @id @default(uuid())
  name String

  slug String @unique

  subLocations SubLocation[]

  pickupCars  Car[] @relation("PickupLocations")
  dropoffCars Car[] @relation("DropoffLocations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubLocation {
  id   String @id @default(uuid())
  name String

  slug       String   @unique
  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  pickupCars  Car[] @relation("PickupSubLocations")
  dropoffCars Car[] @relation("DropoffSubLocations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(uuid())
  name String

  companies Company[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarBrand {
  id    String @id @default(uuid())
  brand String

  logo String

  carModels CarModel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarModel {
  id         String @id @default(uuid())
  name       String
  carBrandId String

  carBrand CarBrand @relation(fields: [carBrandId], references: [id])
  cars     Car[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Car {
  id            String       @id @default(uuid())
  description   String
  year          String
  colors        CarColors
  interiorColor CarColors
  seats         Int
  doors         Int
  engine        String
  kmIncluded    Int
  carType       CarTypes
  gallary       String[]
  transmition   Transmission
  electric      Electric
  carStatus     CarStatus    @default(pending)

  slug String? @unique

  deposite              Int
  commession            Int?
  reservationFlatFee    Int?
  reservationPercentage Int?

  pricings  Int[]
  hourPrice Int?

  minimumHours Int?
  deleviryFee  Int
  coolDown     Int

  additionalFeatures Json[]

  disabled Boolean @default(false)

  pickupLocations  Location[] @relation("PickupLocations")
  dropoffLocations Location[] @relation("DropoffLocations")

  pickupSubLocations  SubLocation[] @relation("PickupSubLocations")
  dropoffSubLocations SubLocation[] @relation("DropoffSubLocations")

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  carModelId String
  carModel   CarModel @relation(fields: [carModelId], references: [id])

  superAdminRules SuperadminRule[]
  discounts       CarDiscount[]

  availabilities  CarAvailability[]
  carExtraOptions CarExtraOption[]

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarAvailability {
  id String @id @default(uuid())

  label String?

  startDate DateTime
  endDate   DateTime

  carId String
  car   Car    @relation(fields: [carId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarDiscount {
  id        String @id @default(uuid())
  label     String
  promocode String @unique

  type  DiscountType @default(fixed)
  value Int

  applyToAll Boolean @default(true)

  carId String?
  car   Car?    @relation(fields: [carId], references: [id])

  discountApplyType DiscountApplyType @default(created)

  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SuperadminRule {
  id String @id @default(uuid())

  label       String
  description String

  type  SuperadminType @default(fixed)
  value Int

  mandatory  Boolean @default(false)
  applyToAll Boolean @default(true)

  carId String?
  car   Car?    @relation(fields: [carId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarExtraOption {
  id          String               @id @default(uuid())
  label       String
  description String
  price       Int
  status      CarExtraOptionStatus @default(pending)
  logo        String

  carId String
  car   Car    @relation(fields: [carId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogCategory {
  id    String @id @default(uuid())
  label String @unique
  slug  String @unique

  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model Blog {
  id String @id @default(uuid())

  title            String
  content          String
  slug             String   @unique
  tags             String[]
  featuredImage    String
  categoryId       String
  author           String
  shortDescription String

  category BlogCategory @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model Booking {
  id String @id @default(uuid())

  firstName          String
  lastName           String
  email              String
  contactNumber      String
  countryOfResidance String

  billingAddress       String
  billingFirstName     String
  billingLastname      String
  billingContactNumber String
  billingCountry       String
  billingCity          String
  billingZipcode       String

  business    Boolean?
  companyName String?
  companyVat  String?

  startDate DateTime
  endDate   DateTime

  pickupLocation  String
  dropoffLocation String?

  extraOptions Json[]
  adminRules   Json[]

  subtotal       Int
  reservationFee Int
  discount       Int
  deliveryFee    Int?
  total          Int
  payNow         Int
  payLater       Int

  bookingCode   String @unique

  terms         Boolean       @default(true)


  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  bookingStatus BookingStatus @default(ACTIVE)

  carId String
  car   Car    @relation(fields: [carId], references: [id])

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model About {
  id String @id @default("About")

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faq {
  id       String @id @default(uuid())
  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//ENUMS

enum Transmission {
  auto
  manual
}

enum CarTypes {
  SUV
  super_cars
  sports
  convertable
  classics
  business
}

enum Electric {
  none
  fully_electric
  hybrid
}

enum CarStatus {
  pending
  active
}

enum CarColors {
  Black
  White
  Silver
  Gray
  Blue
  Red
  Brown
  Green
  Beige
  Gold
  Orange
  Yellow
  Purple
  Maroon
  Navy
  Charcoal
  Other
}

enum DiscountType {
  fixed
  percentage
}

enum DiscountApplyType {
  created
  booked
}

enum SuperadminType {
  fixed
  percentage
}

enum CarExtraOptionStatus {
  pending
  active
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  EXPIRED
  CANCELED
}

enum BookingStatus {
  ACTIVE
  REFUND_REQUEST
  REFUNDED
  CANCELED
}
